/* 레이아웃 */
/* margin에서 0값은 위 아래 여백을 주지 않는다
auto는 가로 중앙에 배치한다는 뜻이다. 그리고 자연스럽게 좌우 여백은 균등하게 배분된다.
그렇게 해서 margin:0 auto;는 위아래 여백 없이 가로 중앙에 배치한다.

/* 레이아웃 */
#wrap { width:1150px; margin:0 auto;
   /*border:1px solid red; */ }
header, footer {
    height: 125px; /*border:1px solid blue; */}
header nav { height: 35px; /*border:1px solid green;*/ }
#main { min-height:800px; margin: 40px 0; }
aside {width: 225px; /*border: 1px solid orange;*/}
#content{width:915px; /*border: 1px solid navy;*/ }


/*header*/
header { background: yellowgreen }
header h1 { width: 225px; height: 125px; margin:0;
background: purple; color: white; float:left;
}

.qmenu { float: right; margin-top: 10px }
.qmenu li { float: left; margin-right: 5px }

.search { float: left; margin: 45px 0 0 150px }
.search input { border: 5px solid green;
    height: 30px; width: 445px; }
.search button { width: 100px; height: 42px;
    background: green; font-weight:bold;
    font-size: 18px; color: whiteb;
    border: 4px outset green }

header nav { clear: both; background: black;
    color: white }
header nav li { float: left; margin-left: 70px;
    margin-top: 5px; font-weight: bold;
    font-size: 18px }

/*main*/
#main {  }
aside { float:left; background: yellow }

.lgmenu {margin-top: 20px;}
.lgmenu li { float: left; font-size: 12px;
        padding: 10px 7px;}

 aside hr { clear:both;}

.atlogin li {float:left; padding:8px 8px;}

.loginfrm { margin-bottom: 180px; }
.loginfrm li { float: left; }
.loginfrm input { width: 125px; margin:3px; 8px;
        padding: 5px;}
.loginfrm button { width: 65px; height: 70px;
        position:relative; top: -35px;}


#notice { clear: both; background: lightyellow; }
#notice h3 { background: black; color:white;
        padding: 7px 5px}

#notice li { height: 40px;
    background:url(img/star.png) no-repeat top left;
        padding-left: 20px; margin-left:5px; }
.ad{ width: 210px; height:300px; margin: 50px auto;
     border:1px dashed black; background: white;}

#content { float : right; background: orange}


/*웰컴메세지*/
#welcome { background: #CCFFCC; height: 450px;
        margin: -40px 10px 10px 10px }/*상우하좌*/
#welcome h1{ font-size: 75px; padding: 10px;
        font-family: Garamond;}
#welcome p { width: 650px; padding-left: 15px;
line-height: 1.55; font-size: 18px;}


/*게시판-최신정보, 사용기*/
#board { width: 895px; /*border: 1px solid black;*/
        margin: 10px 10px 10px 10px; height: 415px}
   

#newinfo{ width: 440px; background: ghostwhite;
        float: left; height: 415px  }
#newinfo h3{ background: #666699; color: white;
        padding: 7px 1px; margin:0}

#newinfo li { height: 35px; padding-left: 40px;
    background: url(img/beach.png) no-repeat 5px 5px;
    margin-left: 10px;}

#newinfo li: first-child { padding:0; margin:0 }
#newinfo li: nth-child(2) { margin-top: 20px }

#used{ width: 440px; background: yellow;
        float: right; height: 415px; }

#used h3{ background: #99cc66; color: white;
        padding: 7px 1px; margin:0}

#used li { height: 35px; padding-left: 40px;
    background: url(img/beach.png) no-repeat 5px 3px;
    margin-left: 10px;}

#used li: first-child { padding:0; margin:0 }
#used li: nth-child(2) { margin-top: 20px }


/*갤러리*/
#gallery { clear:both; width: 895px; height: 450px;
        background: beige; margin: 20px 10px 20px 10px}
#gallery h3 {background: purple; color: white;
        padding: 7px 1px; margin:0}
#gallery ul {margin-top: 10px}
#gallery li {float: left; padding-left: 30px }
#gallery div { width:140px; height:140px;
    border: 1px dashed black; background: white; }
#gallery p {text-align: center}


/*footer*/

footer { clear:both; background: green; height: 160px; }
footer .nav { background: navy; color: white;
        height: 35px; }
footer .nav li { float: left; padding-left: 75px;
    font-weight: bold; font-size: 18px;
    margin-top: 5px; }
footer div { float:left; width: 250px; height: 125px;
    background: purple }
footer p { float:right; text-align: right;
    font-weight: bold; margin: 75px 10px 0 0;
    font-size: 18px }

/*
CSS margin과 padding 한줄에 적을 때 순서

css 에서 박스모델의 margin과 padding을 설정해줄때, 몇가지 방법이 있습니다.

첫째. 각각 다 지정해주는 방법

margin-top: 10px;

margin-right: 20px;

margin-bottom: 15px;

margin-left: 5px;


혹은 margin: 10px 20px 15px 5px;
이때, 순서는 상우하좌 입니다. 시계방향으로 돌아가네요.

둘째. 상하의 margin 이 같고, 좌우의 margin 이 같을 때
margin: 10px 5px;


셋째. 좌우는 같은데, 상하가 다를 때
margin: 10px 5px 25px;
이때, 처음나오는 10px는 margin-top 의 값이고, 마지막에 나오는 25px는 margin-bottom이고
가운데, 5px 가 좌우 마진입니다.

padding의 경우도 마찬가지입니다.

정리하면, 아래 4가지.
margin: [margin-top] [margin-right] [margin-bottom] [margin-left];
margin: [margin-top] [margin-left = margin-right] [margin-bottom];
margin: [margin-top=margin-bottom] [margin-left = margin-right];
margin: [margin-top = margin-bottom = margin-left = margin-right];

position 속성 

position 속성은 웹 문서 안 요소들을 어떻게 배치할 지를 정하는 속성입니다. position 속성을 이용하면 텍스트나 이미지를 원하는 위치로 배치할 수 있고 어떤 방식으로 놓을 지를 결정할 수 있죠. 

티스토리를 하다보면 css를 수정해야하는 일이 잦습니다. 만약 position 속성에 대한 이해없이 css를 수정한다면 예상치도 못하게 블로그 레이아웃이 이상해지거나 망가질 수 있습니다( Wordpress나 서비스 UI, 프론트엔드쪽 만질 때도 마찬가지!). 딴 건 몰라도 화면단과 관련된 일을 한다면 position 속성에 대한 것은 제대로 집고 넘어가야한다고 생각합니다.

position 사용법
position: static | relative | absolute | fixed | sticky
static : 요소를 문서 흐름에 맞추어 배치
relative : 이전 요소(주로 부모 요소)에 자연스럽게 연결하여 위치를 지정
absolute : 원하는 위치를 지정해 배치
fixed : 지정한 위치에 고정하여 배치
sticky : 위치에 따라서 동작방식이 달라짐. 요소가 임계점(scroll박스기준)이전에는 relative와 같이 동작.
그 이후에는 fixed와 같이 동작
static을 제외한 나머지 속성값들은 top, left, bottom, right 와 같이 어느 위치에 요소를 위치시킬 건지 지정할 수 있습니다. 각 값들은 그 방향에서 얼마만큼 떨어져 위치시킬 것인 지를 나타냅니다. 예로들어 top: 15px 면 기준위치 위에서 15px 떨어져 있는 곳에 위치시키라는 뜻입니다.






*/
